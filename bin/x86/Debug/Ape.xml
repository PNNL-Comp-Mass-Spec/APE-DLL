<?xml version="1.0"?>
<doc>
<assembly>
<name>
Ape
</name>
</assembly>
<members>
<member name="P:Ape.SqlServerToSQLite.IsActive">
	<summary>
 Gets a value indicating whether this instance is active.
 </summary>
	<value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
</member><member name="M:Ape.SqlServerToSQLite.CancelConversion">
	<summary>
 Cancels the conversion.
 </summary>
</member><member name="M:Ape.SqlServerToSQLite.ConvertSqlServerToSQLiteDatabase(System.String,System.String,System.String,Ape.SqlConversionHandler,Ape.SqlTableSelectionHandler,System.Boolean)">
	<summary>
 This method takes as input the connection string to an SQL Server database
 and creates a corresponding SQLite database file with a schema derived from
 the SQL Server database.
 </summary>
	<param name="sqlServerConnString">The connection string to the SQL Server database.</param>
	<param name="sqlitePath">The path to the SQLite database file that needs to get created.</param>
	<param name="password">The password to use or NULL if no password should be used to encrypt the DB</param>
	<param name="handler">A handler delegate for progress notifications.</param>
	<param name="selectionHandler">The selection handler that allows the user to select which
 tables to convert</param>
	<remarks>The method continues asynchronously in the background and the caller returned
 immediatly.</remarks>
</member><member name="M:Ape.SqlServerToSQLite.ConvertDatasetToSQLiteFile(System.Collections.Generic.List{System.String},System.Int32,System.String,System.String,System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="dsIndex"></param>
	<param name="sqlServerConnString"></param>
	<param name="MDIDList"></param>
	<param name="sqlitePath"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.ConvertSqlServerToSQLiteDatabaseUI(System.String,System.String,System.String,Ape.SqlConversionHandler,Ape.SqlTableSelectionHandler,System.Boolean)">
	<summary>
 This method takes as input the connection string to an SQL Server database
 and creates a corresponding SQLite database file with a schema derived from
 the SQL Server database.
 </summary>
	<param name="sqlServerConnString">The connection string to the SQL Server database.</param>
	<param name="sqlitePath">The path to the SQLite database file that needs to get created.</param>
	<param name="password">The password to use or NULL if no password should be used to encrypt the DB</param>
	<param name="handler">A handler delegate for progress notifications.</param>
	<param name="selectionHandler">The selection handler that allows the user to select which
 tables to convert</param>
	<remarks>The method continues asynchronously in the background and the caller returned
 immediatly.</remarks>
</member><member name="M:Ape.SqlServerToSQLite.Functions(System.Object)">
	<summary>
	</summary>
	<param name="state"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.ConvertDatasetToSQLiteFileUI(System.Collections.Generic.List{System.String},System.Int32,System.String,System.String,System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="dsIndex"></param>
	<param name="sqlServerConnString"></param>
	<param name="MDIDList"></param>
	<param name="sqlitePath"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.FunctionsNew(System.Object)">
	<summary>
	</summary>
	<param name="state"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.StartWorkflowUI(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="WorflowStepList"></param>
	<param name="WorkFlow"></param>
	<param name="originalSqlitePath"></param>
	<param name="sqlitePath"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.FunctionWF(System.Object)">
	<summary>
	</summary>
	<param name="state"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.StartWorkflow(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="WorflowStepList"></param>
	<param name="WorkFlow"></param>
	<param name="originalSqlitePath"></param>
	<param name="sqlitePath"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.CopyFile(System.String,System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="OriginalFilename"></param>
	<param name="NewFilename"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.FunctionsCIT(System.Object)">
	<summary>
	</summary>
	<param name="state"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.ConvertSqlServerDatabaseToSQLiteFile(System.String,System.String,System.String,Ape.SqlConversionHandler,Ape.SqlTableSelectionHandler,System.Boolean)">
	<summary>
 Do the entire process of first reading the SQL Server schema, creating a corresponding
 SQLite schema, and copying all rows from the SQL Server database to the SQLite database.
 </summary>
	<param name="sqlConnString">The SQL Server connection string</param>
	<param name="sqlitePath">The path to the generated SQLite database file</param>
	<param name="password">The password to use or NULL if no password should be used to encrypt the DB</param>
	<param name="handler">A handler to handle progress notifications.</param>
	<param name="selectionHandler">The selection handler which allows the user to select which tables to 
 convert.</param>
</member><member name="M:Ape.SqlServerToSQLite.ConvertSqlServerDatasetToSQLiteFile(System.Collections.Generic.List{System.String},System.Int32,System.String,System.String,System.String,Ape.SqlConversionHandler)">
	<summary>
 Do the entire process of first reading the SQL Server schema, creating a corresponding
 SQLite schema, and copying all rows from the SQL Server database to the SQLite database.
 </summary>
	<param name="paramList"></param>
	<param name="dsIndex"></param>
	<param name="sqlConnString"></param>
	<param name="IDList"></param>
	<param name="sqlitePath">The path to the generated SQLite database file</param>
	<param name="handler">A handler to handle progress notifications.</param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.ExecuteWorkflow(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="WorkflowStepList"></param>
	<param name="Workflow"></param>
	<param name="originalSqlitePath"></param>
	<param name="sqlitePath"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.BuildStepList(System.String,System.Collections.Generic.List{Ape.clsXMLStepSchema})">
	<summary>
	</summary>
	<param name="workflowStepList"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.SaveWorkflowToDatabase(System.String,System.String)">
	<summary>
	</summary>
	<param name="Workflow"></param>
	<param name="sqlitePath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.RunCreateIterationTable(System.String,System.Boolean,System.String,System.String,System.String,System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="Sql"></param>
	<param name="CreateSeparateTable"></param>
	<param name="iterationTblName"></param>
	<param name="newTblName"></param>
	<param name="groupByText"></param>
	<param name="sqlitePath"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.CompactSQLiteDatabase(System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="sqlitePath"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.PerformCopyFile(System.String,System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="originalFile"></param>
	<param name="newFile"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.RunWorkflow(System.Collections.Hashtable,System.Int32,System.Collections.Generic.List{Ape.clsXMLStepSchema},System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="stepsToRun"></param>
	<param name="workflowTotalSteps"></param>
	<param name="Workflow"></param>
	<param name="sqlitePath"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.HandleStatusMessageUpdated(System.Object,Mage.MageStatusEventArgs)">
	<summary>
 handle the status update messages from the currently running pipeline
 </summary>
	<param name="sender">(ignored))</param>
	<param name="args">(ignored)</param>
</member><member name="M:Ape.SqlServerToSQLite.HandlePipelineCompletion(System.Object,Mage.MageStatusEventArgs)">
	<summary>
 handle the status completion message from the currently running pipeline
 </summary>
	<param name="sender">(ignored)</param>
	<param name="args">Contains status information to be displayed</param>
</member><member name="M:Ape.SqlServerToSQLite.BuildCrosstabTableQuery(System.String,System.String[])">
	<summary>
	</summary>
	<param name="connString"></param>
	<param name="sql"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.CreateMTSCacheIndex(System.String,System.String,System.String,System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="fieldNames"></param>
	<param name="indexName"></param>
	<param name="sqlitePath"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.CopyTableRowsToSQLiteDB(System.Data.DataSet,System.String,System.Collections.Generic.List{Ape.TableSchema},System.String,Ape.SqlConversionHandler)">
	<summary>
 Copies table rows from the SQL Server database to the SQLite database.
 </summary>
	<param name="ds">The dataset passed from stored procedure</param>
	<param name="sqlitePath">The path to the SQLite database file.</param>
	<param name="schema">The schema of the SQL Server database.</param>
	<param name="password">The password to use for encrypting the file</param>
	<param name="handler">A handler to handle progress notifications.</param>
</member><member name="M:Ape.SqlServerToSQLite.CopySqlServerRowsToSQLiteDB(System.String,System.String,System.Collections.Generic.List{Ape.TableSchema},System.String,Ape.SqlConversionHandler)">
	<summary>
 Copies table rows from the SQL Server database to the SQLite database.
 </summary>
	<param name="sqlConnString">The SQL Server connection string</param>
	<param name="sqlitePath">The path to the SQLite database file.</param>
	<param name="schema">The schema of the SQL Server database.</param>
	<param name="password">The password to use for encrypting the file</param>
	<param name="handler">A handler to handle progress notifications.</param>
</member><member name="M:Ape.SqlServerToSQLite.CastValueForColumn(System.Object,Ape.ColumnSchema)">
	<summary>
 Used in order to adjust the value received from SQL Server for the SQLite database.
 </summary>
	<param name="val">The value object</param>
	<param name="columnSchema">The corresponding column schema</param>
	<returns>SQLite adjusted value.</returns>
</member><member name="M:Ape.SqlServerToSQLite.BuildSQLiteInsert(Ape.TableSchema)">
	<summary>
 Creates a command object needed to insert values into a specific SQLite table.
 </summary>
	<param name="ts">The table schema object for the table.</param>
	<returns>A command object with the required functionality.</returns>
</member><member name="M:Ape.SqlServerToSQLite.GetNormalizedName(System.String,System.Collections.Generic.List{System.String})">
	<summary>
 Used in order to avoid breaking naming rules (e.g., when a table has
 a name in SQL Server that cannot be used as a basis for a matching index
 name in SQLite).
 </summary>
	<param name="str">The name to change if necessary</param>
	<param name="names">Used to avoid duplicate names</param>
	<returns>A normalized name</returns>
</member><member name="M:Ape.SqlServerToSQLite.GetDbTypeOfColumn(Ape.ColumnSchema)">
	<summary>
 Matches SQL Server types to general DB types
 </summary>
	<param name="cs">The column schema to use for the match</param>
	<returns>The matched DB type</returns>
</member><member name="M:Ape.SqlServerToSQLite.BuildSqlServerTableQuery(Ape.TableSchema)">
	<summary>
 Builds a SELECT query for a specific table. Needed in the process of copying rows
 from the SQL Server database to the SQLite database.
 </summary>
	<param name="ts">The table schema of the table for which we need the query.</param>
	<returns>The SELECT query for the table.</returns>
</member><member name="M:Ape.SqlServerToSQLite.CreateSQLiteDatabase(System.String,System.Collections.Generic.List{Ape.TableSchema},System.String,Ape.SqlConversionHandler)">
	<summary>
 Creates the SQLite database from the schema read from the SQL Server.
 </summary>
	<param name="sqlitePath">The path to the generated DB file.</param>
	<param name="schema">The schema of the SQL server database.</param>
	<param name="password">The password to use for encrypting the DB or null if non is needed.</param>
	<param name="handler">A handle for progress notifications.</param>
</member><member name="M:Ape.SqlServerToSQLite.CreateSQLiteDatabaseOnly(System.String)">
	<summary>
 Creates the SQLite database from the schema read from the SQL Server.
 </summary>
	<param name="sqlitePath">The path to the generated DB file.</param>
</member><member name="M:Ape.SqlServerToSQLite.AddSchemaToSQLiteDatabase(System.String,System.Collections.Generic.List{Ape.TableSchema},System.String,Ape.SqlConversionHandler)">
	<summary>
 Creates the SQLite database from the schema read from the SQL Server.
 </summary>
	<param name="sqlitePath">The path to the generated DB file.</param>
	<param name="schema">The schema of the SQL server database.</param>
	<param name="password">The password to use for encrypting the DB or null if non is needed.</param>
	<param name="handler">A handle for progress notifications.</param>
</member><member name="M:Ape.SqlServerToSQLite.AddSQLiteTable(System.Data.SQLite.SQLiteConnection,Ape.TableSchema)">
	<summary>
 Creates the CREATE TABLE DDL for SQLite and a specific table.
 </summary>
	<param name="conn">The SQLite connection</param>
	<param name="dt">The table schema object for the table to be generated.</param>
</member><member name="M:Ape.SqlServerToSQLite.BuildCreateTableQuery(Ape.TableSchema)">
	<summary>
 returns the CREATE TABLE DDL for creating the SQLite table from the specified
 table schema object.
 </summary>
	<param name="ts">The table schema object from which to create the SQL statement.</param>
	<returns>CREATE TABLE DDL for the specified table.</returns>
</member><member name="M:Ape.SqlServerToSQLite.BuildCreateIndex(System.String,Ape.IndexSchema)">
	<summary>
 Creates a CREATE INDEX DDL for the specified table and index schema.
 </summary>
	<param name="tableName">The name of the indexed table.</param>
	<param name="indexSchema">The schema of the index object</param>
	<returns>A CREATE INDEX DDL (SQLite format).</returns>
</member><member name="M:Ape.SqlServerToSQLite.BuildColumnStatement(Ape.ColumnSchema,Ape.TableSchema,System.Boolean@)">
	<summary>
 Used when creating the CREATE TABLE DDL. Creates a single row
 for the specified column.
 </summary>
	<param name="col">The column schema</param>
	<returns>A single column line to be inserted into the general CREATE TABLE DDL statement</returns>
</member><member name="M:Ape.SqlServerToSQLite.DiscardNational(System.String)">
	<summary>
 Discards the national prefix if exists (e.g., N'sometext') which is not
 supported in SQLite.
 </summary>
	<param name="value">The value.</param>
	<returns></returns>
</member><member name="M:Ape.SqlServerToSQLite.IsValidDefaultValue(System.String)">
	<summary>
 Check if the DEFAULT clause is valid by SQLite standards
 </summary>
	<param name="value"></param>
	<returns></returns>
</member><member name="M:Ape.SqlServerToSQLite.IsSingleQuoted(System.String)">
	<summary>
	</summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.StripParens(System.String)">
	<summary>
 Strip any parentheses from the string.
 </summary>
	<param name="value">The string to strip</param>
	<returns>The stripped string</returns>
</member><member name="M:Ape.SqlServerToSQLite.ReadSqlServerSchema(System.String,Ape.SqlConversionHandler,Ape.SqlTableSelectionHandler)">
	<summary>
 Reads the entire SQL Server DB schema using the specified connection string.
 </summary>
	<param name="connString">The connection string used for reading SQL Server schema.</param>
	<param name="handler">A handler for progress notifications.</param>
	<param name="selectionHandler">The selection handler which allows the user to select 
 which tables to convert.</param>
	<returns>List of table schema objects for every table in the SQL Server database.</returns>
</member><member name="M:Ape.SqlServerToSQLite.CheckCancelled">
	<summary>
 Convenience method for checking if the conversion progress needs to be cancelled.
 </summary>
</member><member name="M:Ape.SqlServerToSQLite.CreateTableSchema(System.Data.SqlClient.SqlConnection,System.String)">
	<summary>
 Creates a TableSchema object using the specified SQL Server connection
 and the name of the table for which we need to create the schema.
 </summary>
	<param name="conn">The SQL Server connection to use</param>
	<param name="tableName">The name of the table for which we wants to create the table schema.</param>
	<returns>A table schema object that represents our knowledge of the table schema</returns>
</member><member name="M:Ape.SqlServerToSQLite.CreateViperResultsCacheDatabase(System.Collections.Generic.List{System.String},System.String,System.String,System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="sqlConnString"></param>
	<param name="sqlitePath"></param>
	<param name="MD_ID_List"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.CreateAMTTagDbsAllCacheDatabase(System.Collections.Generic.List{System.String},System.String,System.String,System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="sqlConnString"></param>
	<param name="sqlitePath"></param>
	<param name="MD_ID_List"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.CreateAMTTagDbsJobsCacheDatabase(System.Collections.Generic.List{System.String},System.String,System.String,System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="sqlConnString"></param>
	<param name="sqlitePath"></param>
	<param name="MD_ID_List"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.CreatePTDbsCacheDatabase(System.Collections.Generic.List{System.String},System.String,System.String,System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="sqlConnString"></param>
	<param name="sqlitePath"></param>
	<param name="ID_List"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.CreateMTBCacheTableFromProcInChunks(System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,Ape.SqlConversionHandler,System.String,System.Collections.Generic.List{System.String},System.Int32)">
	<summary>
	</summary>
	<param name="sprocParam"></param>
	<param name="sqlConnString"></param>
	<param name="sqlitePath"></param>
	<param name="MD_ID_List"></param>
	<param name="handler"></param>
	<param name="StoredProcName"></param>
	<param name="tblNames"></param>
	<param name="chunkSize"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.CreateMTBCacheTableFromProc(System.String,System.Collections.Generic.List{Ape.TableSchema},Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="sqlitePath"></param>
	<param name="tmpTblSchema"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.ReturnTableSchemaFromStoredProc(System.Collections.Generic.List{System.String},System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="sprocParam"></param>
	<param name="connectionString"></param>
	<param name="tblNames"></param>
	<param name="mStoredProcName"></param>
	<param name="MD_ID_List"></param>
	<param name="handler"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.GetAdditionalRecordsFromStoredProc(System.String,System.String,System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="connectionString"></param>
	<param name="mStoredProcName"></param>
	<param name="MD_ID_List"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.GetFieldType(System.String)">
	<summary>
	</summary>
	<param name="dataType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.ValidateSQLiteDataType(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="dataType"></param>
	<param name="tableName"></param>
	<param name="fieldName"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqlServerToSQLite.ValidateDataType(System.String)">
	<summary>
 Small validation method to make sure we don't miss anything without getting
 an exception.
 </summary>
	<param name="dataType">The datatype to validate.</param>
</member><member name="M:Ape.SqlServerToSQLite.FixDefaultValueString(System.String)">
	<summary>
 Does some necessary adjustments to a value string that appears in a column DEFAULT
 clause.
 </summary>
	<param name="colDefault">The original default value string (as read from SQL Server).</param>
	<returns>Adjusted DEFAULT value string (for SQLite)</returns>
</member><member name="M:Ape.SqlServerToSQLite.BuildIndexSchema(System.String,System.String,System.String)">
	<summary>
 Builds an index schema object from the specified components (Read from SQL Server).
 </summary>
	<param name="indexName">The name of the index</param>
	<param name="desc">The description of the index</param>
	<param name="keys">Key columns that are part of the index.</param>
	<returns>An index schema object that represents our knowledge of the index</returns>
</member><member name="M:Ape.SqlServerToSQLite.AdjustDefaultValue(System.String)">
	<summary>
 More adjustments for the DEFAULT value clause.
 </summary>
	<param name="val">The value to adjust</param>
	<returns>Adjusted DEFAULT value string</returns>
</member><member name="M:Ape.SqlServerToSQLite.CreateSQLiteConnectionString(System.String,System.String)">
	<summary>
 Creates SQLite connection string from the specified DB file path.
 </summary>
	<param name="sqlitePath">The path to the SQLite database file.</param>
	<returns>SQLite connection string</returns>
</member><member name="T:Ape.SqlServerToSQLite">
	<summary>
 This class is responsible to take a single SQL Server database
 and convert it to an SQLite database file.
 </summary>
	<remarks>The class knows how to convert table and index structures only.</remarks>
</member><member name="T:Ape.SqlConversionHandler">
	<summary>
 This handler is called whenever a progress is made in the conversion process.
 </summary>
	<param name="done">TRUE indicates that the entire conversion process is finished.</param>
	<param name="success">TRUE indicates that the current step finished successfully.</param>
	<param name="percent">Progress percent (0-100)</param>
	<param name="msg">A message that accompanies the progress.</param>
</member><member name="T:Ape.SqlTableSelectionHandler">
	<summary>
 This handler allows the user to change which tables get converted from SQL Server
 to SQLite.
 </summary>
	<param name="schema">The original SQL Server DB schema</param>
	<returns>The same schema minus any table we don't want to convert.</returns>
</member><member name="T:Ape.SqlQueryHandler">
	<summary>
 This handler is called whenever a progress is made in the conversion process.
 </summary>
	<param name="done">TRUE indicates that the entire conversion process is finished.</param>
	<param name="success">TRUE indicates that the current step finished successfully.</param>
	<param name="percent">Progress percent (0-100)</param>
	<param name="msg">A message that accompanies the progress.</param>
</member><member name="P:Ape.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Ape.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Ape.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="T:Ape.clsXMLStepSchema">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Ape.clsXMLFields">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Ape.SqliteToAccess.IsActive">
	<summary>
 Gets a value indicating whether this instance is active.
 </summary>
	<value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
</member><member name="M:Ape.SqliteToAccess.CancelConversion">
	<summary>
 Cancels the conversion.
 </summary>
</member><member name="M:Ape.SqliteToAccess.ConvertSQLiteToTextFile(System.String,System.String,System.String,System.String,Ape.SqlConversionHandler,Ape.SqlTableSelectionHandler)">
	<summary>
 This method takes as input the connection string to an SQLite database
 and creates a corresponding Access database file with a schema derived from
 the SQLite database.
 </summary>
	<param name="sqlitePath">The path to the SQLite database file that needs to get created.</param>
	<param name="password">The password to use or NULL if no password should be used to encrypt the DB</param>
	<param name="handler">A handler delegate for progress notifications.</param>
	<param name="selectionHandler">The selection handler that allows the user to select which
 tables to convert</param>
	<remarks>The method continues asynchronously in the background and the caller returned
 immediatly.</remarks>
</member><member name="M:Ape.SqliteToAccess.FunctionCSTTF(System.Object)">
	<summary>
	</summary>
	<param name="state"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.ConvertSQLiteToAccessDatabase(System.String,System.String,System.String,Ape.SqlConversionHandler,Ape.SqlTableSelectionHandler)">
	<summary>
 This method takes as input the connection string to an SQLite database
 and creates a corresponding Access database file with a schema derived from
 the SQLite database.
 </summary>
	<param name="sqlitePath">The path to the SQLite database file that needs to get created.</param>
	<param name="password">The password to use or NULL if no password should be used to encrypt the DB</param>
	<param name="handler">A handler delegate for progress notifications.</param>
	<param name="selectionHandler">The selection handler that allows the user to select which
 tables to convert</param>
	<remarks>The method continues asynchronously in the background and the caller returned
 immediatly.</remarks>
</member><member name="M:Ape.SqliteToAccess.FunctionCSTAD(System.Object)">
	<summary>
	</summary>
	<param name="state"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.ConvertAccessToSQLiteDatabase(System.String,System.String,System.String,Ape.SqlConversionHandler,Ape.SqlTableSelectionHandler)">
	<summary>
	</summary>
	<param name="AccessPath"></param>
	<param name="sqlitePath"></param>
	<param name="password"></param>
	<param name="handler"></param>
	<param name="selectionHandler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.FunctionCATSD(System.Object)">
	<summary>
	</summary>
	<param name="state"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.ConvertTextFileToSQLiteDatabase(System.String[],System.String,System.String[],System.String,System.String,Ape.SqlConversionHandler,Ape.SqlTableSelectionHandler)">
	<summary>
	</summary>
	<param name="textFileParams"></param>
	<param name="textFilePath"></param>
	<param name="colList"></param>
	<param name="sqlitePath"></param>
	<param name="password"></param>
	<param name="handler"></param>
	<param name="selectionHandler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.FunctionCTFTSD(System.Object)">
	<summary>
	</summary>
	<param name="state"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.FunctionsCDTFFL(System.Object)">
	<summary>
	</summary>
	<param name="state"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.ConvertSQLiteDatabaseToTextFile(System.String,System.String,System.String,Ape.SqlConversionHandler,Ape.SqlTableSelectionHandler)">
	<summary>
	</summary>
	<param name="sqlitePath"></param>
	<param name="textFileDirectory"></param>
	<param name="password"></param>
	<param name="handler"></param>
	<param name="selectionHandler"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.ConvertSQLiteDatabaseToAccessDatabase(System.String,System.String,System.String,Ape.SqlConversionHandler,Ape.SqlTableSelectionHandler)">
	<summary>
 Do the entire process of first reading the SQL Server schema, creating a corresponding
 SQLite schema, and copying all rows from the SQL Server database to the SQLite database.
 </summary>
	<param name="sqlitePath">The path to the generated SQLite database file</param>
	<param name="password">The password to use or NULL if no password should be used to encrypt the DB</param>
	<param name="handler">A handler to handle progress notifications.</param>
	<param name="selectionHandler">The selection handler which allows the user to select which tables to 
 convert.</param>
</member><member name="M:Ape.SqliteToAccess.ConvertAccessDatabaseToSQLiteDatabase(System.String,System.String,System.String,Ape.SqlConversionHandler,Ape.SqlTableSelectionHandler)">
	<summary>
	</summary>
	<param name="AccessPath"></param>
	<param name="sqlitePath"></param>
	<param name="password"></param>
	<param name="handler"></param>
	<param name="selectionHandler"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.ReadAccessSchema(System.String,Ape.SqlConversionHandler,Ape.SqlTableSelectionHandler)">
	<summary>
	</summary>
	<param name="connString"></param>
	<param name="handler"></param>
	<param name="selectionHandler"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.CreateAccessTableSchema(System.Data.OleDb.OleDbConnection,System.String)">
	<summary>
	</summary>
	<param name="conn"></param>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.ValidateAccessDataType(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="dataType"></param>
	<param name="tableName"></param>
	<param name="fieldName"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.CreateSQLiteTables(System.String,System.Collections.Generic.List{Ape.TableSchema},Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="sqlitePath"></param>
	<param name="schema"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.CopyAccessDBRowsToSQLiteDB(System.String,System.String,System.Collections.Generic.List{Ape.TableSchema},System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="sqlitePath"></param>
	<param name="AccessConnString"></param>
	<param name="schema"></param>
	<param name="password"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.CreateAccessDatabase(System.String,System.Collections.Generic.List{Ape.TableSchema},Ape.SqlConversionHandler)">
	<summary>
 Creates the SQLite database from the schema read from the SQL Server.
 </summary>
	<param name="AccessPath">The path to the generated DB file.</param>
	<param name="schema">The schema of the SQL server database.</param>
	<param name="handler">A handle for progress notifications.</param>
</member><member name="M:Ape.SqliteToAccess.AddAccessTable(System.Data.OleDb.OleDbConnection,Ape.TableSchema)">
	<summary>
	</summary>
	<param name="conn"></param>
	<param name="dt"></param>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.BuildAccessCreateTableQuery(Ape.TableSchema)">
	<summary>
	</summary>
	<param name="ts"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.BuildAccessColumnStatement(Ape.ColumnSchema,Ape.TableSchema,System.Boolean@)">
	<summary>
	</summary>
	<param name="col"></param>
	<param name="ts"></param>
	<param name="pkey"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.CopySQLiteDBRowsToAccessDB(System.String,System.String,System.Collections.Generic.List{Ape.TableSchema},System.String,Ape.SqlConversionHandler)">
	<summary>
 Copies table rows from the SQL Server database to the SQLite database.
 </summary>
	<param name="sqlitePath">The SQL Server connection string</param>
	<param name="AccessConnString">The path to the SQLite database file.</param>
	<param name="schema">The schema of the SQL Server database.</param>
	<param name="password">The password to use for encrypting the file</param>
	<param name="handler">A handler to handle progress notifications.</param>
</member><member name="M:Ape.SqliteToAccess.BuildAccessInsert(Ape.TableSchema)">
	<summary>
	</summary>
	<param name="ts"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.GetAccessDbTypeOfColumn(Ape.ColumnSchema)">
	<summary>
	</summary>
	<param name="cs"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.CastValueForColumn(System.Object,Ape.ColumnSchema)">
	<summary>
 Used in order to adjust the value received from SQL Servr for the SQLite database.
 </summary>
	<param name="val">The value object</param>
	<param name="columnSchema">The corresponding column schema</param>
	<returns>SQLite adjusted value.</returns>
</member><member name="M:Ape.SqliteToAccess.BuildSQLiteInsert(Ape.TableSchema)">
	<summary>
 Creates a command object needed to insert values into a specific SQLite table.
 </summary>
	<param name="ts">The table schema object for the table.</param>
	<returns>A command object with the required functionality.</returns>
</member><member name="M:Ape.SqliteToAccess.GetNormalizedName(System.String,System.Collections.Generic.List{System.String})">
	<summary>
 Used in order to avoid breaking naming rules (e.g., when a table has
 a name in SQL Server that cannot be used as a basis for a matching index
 name in SQLite).
 </summary>
	<param name="str">The name to change if necessary</param>
	<param name="names">Used to avoid duplicate names</param>
	<returns>A normalized name</returns>
</member><member name="M:Ape.SqliteToAccess.GetDbTypeOfColumn(Ape.ColumnSchema)">
	<summary>
 Matches SQL Server types to general DB types
 </summary>
	<param name="cs">The column schema to use for the match</param>
	<returns>The matched DB type</returns>
</member><member name="M:Ape.SqliteToAccess.BuildSqlServerTableQuery(System.String,Ape.TableSchema)">
	<summary>
 Builds a SELECT query for a specific table. Needed in the process of copying rows
 from the SQL Server database to the SQLite database.
 </summary>
	<param name="ts">The table schema of the table for which we need the query.</param>
	<returns>The SELECT query for the table.</returns>
</member><member name="M:Ape.SqliteToAccess.AddSQLiteTable(System.Data.SQLite.SQLiteConnection,Ape.TableSchema)">
	<summary>
 Creates the CREATE TABLE DDL for SQLite and a specific table.
 </summary>
	<param name="conn">The SQLite connection</param>
	<param name="dt">The table schema object for the table to be generated.</param>
</member><member name="M:Ape.SqliteToAccess.BuildCreateTableQuery(Ape.TableSchema)">
	<summary>
 returns the CREATE TABLE DDL for creating the SQLite table from the specified
 table schema object.
 </summary>
	<param name="ts">The table schema object from which to create the SQL statement.</param>
	<returns>CREATE TABLE DDL for the specified table.</returns>
</member><member name="M:Ape.SqliteToAccess.BuildCreateIndex(System.String,Ape.IndexSchema)">
	<summary>
 Creates a CREATE INDEX DDL for the specified table and index schema.
 </summary>
	<param name="tableName">The name of the indexed table.</param>
	<param name="indexSchema">The schema of the index object</param>
	<returns>A CREATE INDEX DDL (SQLite format).</returns>
</member><member name="M:Ape.SqliteToAccess.BuildColumnStatement(Ape.ColumnSchema,Ape.TableSchema,System.Boolean@)">
	<summary>
 Used when creating the CREATE TABLE DDL. Creates a single row
 for the specified column.
 </summary>
	<param name="col">The column schema</param>
	<returns>A single column line to be inserted into the general CREATE TABLE DDL statement</returns>
</member><member name="M:Ape.SqliteToAccess.DiscardNational(System.String)">
	<summary>
 Discards the national prefix if exists (e.g., N'sometext') which is not
 supported in SQLite.
 </summary>
	<param name="value">The value.</param>
	<returns></returns>
</member><member name="M:Ape.SqliteToAccess.IsValidDefaultValue(System.String)">
	<summary>
 Check if the DEFAULT clause is valid by SQLite standards
 </summary>
	<param name="value"></param>
	<returns></returns>
</member><member name="M:Ape.SqliteToAccess.IsSingleQuoted(System.String)">
	<summary>
	</summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.StripParens(System.String)">
	<summary>
 Strip any parentheses from the string.
 </summary>
	<param name="value">The string to strip</param>
	<returns>The stripped string</returns>
</member><member name="M:Ape.SqliteToAccess.ReadSqliteSchema(System.String,Ape.SqlConversionHandler,Ape.SqlTableSelectionHandler)">
	<summary>
 Reads the entire SQL Server DB schema using the specified connection string.
 </summary>
	<param name="connString">The connection string used for reading SQL Server schema.</param>
	<param name="handler">A handler for progress notifications.</param>
	<param name="selectionHandler">The selection handler which allows the user to select 
 which tables to convert.</param>
	<returns>List of table schema objects for every table in the SQL Server database.</returns>
</member><member name="M:Ape.SqliteToAccess.CheckCancelled">
	<summary>
 Convenience method for checking if the conversion progress needs to be cancelled.
 </summary>
</member><member name="M:Ape.SqliteToAccess.CreateSQLiteTableSchema(System.Data.SQLite.SQLiteConnection,System.String)">
	<summary>
 Creates a TableSchema object using the specified SQL Server connection
 and the name of the table for which we need to create the schema.
 </summary>
	<param name="conn">The SQL Server connection to use</param>
	<param name="tableName">The name of the table for which we wants to create the table schema.</param>
	<returns>A table schema object that represents our knowledge of the table schema</returns>
</member><member name="M:Ape.SqliteToAccess.ValidateSQLiteDataType(System.String,System.String,System.String)">
	<summary>
 Small validation method to make sure we don't miss anything without getting
 an exception.
 </summary>
	<param name="dataType">The datatype to validate.</param>
</member><member name="M:Ape.SqliteToAccess.FixDefaultValueString(System.String)">
	<summary>
 Does some necessary adjustments to a value string that appears in a column DEFAULT
 clause.
 </summary>
	<param name="colDefault">The original default value string (as read from SQL Server).</param>
	<returns>Adjusted DEFAULT value string (for SQLite)</returns>
</member><member name="M:Ape.SqliteToAccess.BuildIndexSchema(System.String,System.String,System.String)">
	<summary>
 Builds an index schema object from the specified components (Read from SQL Server).
 </summary>
	<param name="indexName">The name of the index</param>
	<param name="desc">The description of the index</param>
	<param name="keys">Key columns that are part of the index.</param>
	<returns>An index schema object that represents our knowledge of the index</returns>
</member><member name="M:Ape.SqliteToAccess.AdjustDefaultValue(System.String)">
	<summary>
 More adjustments for the DEFAULT value clause.
 </summary>
	<param name="val">The value to adjust</param>
	<returns>Adjusted DEFAULT value string</returns>
</member><member name="M:Ape.SqliteToAccess.CreateSQLiteConnectionString(System.String,System.String)">
	<summary>
 Creates SQLite connection string from the specified DB file path.
 </summary>
	<param name="sqlitePath">The path to the SQLite database file.</param>
	<returns>SQLite connection string</returns>
</member><member name="M:Ape.SqliteToAccess.BuildAccessDbConnString(System.String)">
	<summary>
	</summary>
	<param name="accessPath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ape.SqliteToAccess.CopySQLiteDBRowsToTextFile(System.String,System.String,System.String,System.Collections.Generic.List{Ape.TableSchema},System.String,Ape.SqlConversionHandler)">
	<summary>
	</summary>
	<param name="sqlitePath"></param>
	<param name="textFileDirectory"></param>
	<param name="delim"></param>
	<param name="schema"></param>
	<param name="password"></param>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="T:Ape.SqliteToAccess">
	<summary>
 This class is responsible to take a single SQL Server database
 and convert it to an SQLite database file.
 </summary>
	<remarks>The class knows how to convert table and index structures only.</remarks>
</member><member name="P:Ape.clsLogTools.FileLogDebugEnabled">
	<summary>
 Tells calling program file debug status
 </summary>
	<returns>TRUE if debug level enabled for file logger; FALSE otherwise</returns>
	<remarks></remarks>
</member><member name="M:Ape.clsLogTools.WriteLog(Ape.clsLogTools.LoggerTypes,Ape.clsLogTools.LogLevels,System.String)">
	<summary>
 Writes a message to the logging system
 </summary>
	<param name="LoggerType">Type of logger to use</param>
	<param name="LogLevel">Level of log reporting</param>
	<param name="InpMsg">Message to be logged</param>
	<remarks></remarks>
</member><member name="M:Ape.clsLogTools.WriteLog(Ape.clsLogTools.LoggerTypes,Ape.clsLogTools.LogLevels,System.String,System.Exception)">
	<summary>
 Overload to write a message and exception to the logging system
 </summary>
	<param name="LoggerType">Type of logger to use</param>
	<param name="LogLevel">Level of log reporting</param>
	<param name="InpMsg">Message to be logged</param>
	<param name="Ex">Exception to be logged</param>
	<remarks></remarks>
</member><member name="M:Ape.clsLogTools.ChangeLogFileName(System.String)">
	<summary>
 Changes the base log file name
 </summary>
	<param name="FileName">Log file base name and path (relative to program folder)</param>
	<remarks></remarks>
</member><member name="M:Ape.clsLogTools.FindAppenders(System.String)">
	<summary>
 Gets the specified appender
 </summary>
	<param name="AppendName">Name of appender to find</param>
	<returns>List(IAppender) objects if found; NOTHING otherwise</returns>
	<remarks></remarks>
</member><member name="M:Ape.clsLogTools.SetFileLogLevel(System.Int32)">
	<summary>
 Sets the file logging level via an integer value (Overloaded)
 </summary>
	<param name="InpLevel">Integer corresponding to level (1-5, 5 being most verbose</param>
	<remarks></remarks>
</member><member name="M:Ape.clsLogTools.SetFileLogLevel(Ape.clsLogTools.LogLevels)">
	<summary>
 Sets file logging level based on enumeration (Overloaded)
 </summary>
	<param name="InpLevel">LogLevels value defining level (Debug is most verbose)</param>
	<remarks></remarks>
</member>
</members>
</doc>